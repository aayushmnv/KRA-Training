// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: order.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "order";

export interface Empty {
}

export interface OrderRequest {
  id: string;
}

export interface CreateOrderRequest {
  userId: string;
  products: OrderedProduct[];
  totalAmount: number;
  status: string;
}

export interface OrderedProduct {
  productId: string;
  title: string;
  price: number;
  quantity: number;
}

export interface OrderResponse {
  id: string;
  userId: string;
  products: OrderedProduct[];
  totalAmount: number;
  status: string;
  createdAt: string;
}

export interface OrderListResponse {
  orders: OrderResponse[];
}

export const ORDER_PACKAGE_NAME = "order";

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseOrderRequest(): OrderRequest {
  return { id: "" };
}

export const OrderRequest: MessageFns<OrderRequest> = {
  encode(message: OrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateOrderRequest(): CreateOrderRequest {
  return { userId: "", products: [], totalAmount: 0, status: "" };
}

export const CreateOrderRequest: MessageFns<CreateOrderRequest> = {
  encode(message: CreateOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.products) {
      OrderedProduct.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.totalAmount !== 0) {
      writer.uint32(25).double(message.totalAmount);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.products.push(OrderedProduct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.totalAmount = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseOrderedProduct(): OrderedProduct {
  return { productId: "", title: "", price: 0, quantity: 0 };
}

export const OrderedProduct: MessageFns<OrderedProduct> = {
  encode(message: OrderedProduct, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.price !== 0) {
      writer.uint32(25).double(message.price);
    }
    if (message.quantity !== 0) {
      writer.uint32(32).int32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderedProduct {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderedProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseOrderResponse(): OrderResponse {
  return { id: "", userId: "", products: [], totalAmount: 0, status: "", createdAt: "" };
}

export const OrderResponse: MessageFns<OrderResponse> = {
  encode(message: OrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    for (const v of message.products) {
      OrderedProduct.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.totalAmount !== 0) {
      writer.uint32(33).double(message.totalAmount);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.products.push(OrderedProduct.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.totalAmount = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseOrderListResponse(): OrderListResponse {
  return { orders: [] };
}

export const OrderListResponse: MessageFns<OrderListResponse> = {
  encode(message: OrderListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orders) {
      OrderResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orders.push(OrderResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface OrderServiceClient {
  createOrder(request: CreateOrderRequest): Observable<OrderResponse>;

  getOrder(request: OrderRequest): Observable<OrderResponse>;

  listOrders(request: Empty): Observable<OrderListResponse>;
}

export interface OrderServiceController {
  createOrder(request: CreateOrderRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  getOrder(request: OrderRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  listOrders(request: Empty): Promise<OrderListResponse> | Observable<OrderListResponse> | OrderListResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createOrder", "getOrder", "listOrders"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";

export type OrderServiceService = typeof OrderServiceService;
export const OrderServiceService = {
  createOrder: {
    path: "/order.OrderService/CreateOrder",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateOrderRequest): Buffer => Buffer.from(CreateOrderRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateOrderRequest => CreateOrderRequest.decode(value),
    responseSerialize: (value: OrderResponse): Buffer => Buffer.from(OrderResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): OrderResponse => OrderResponse.decode(value),
  },
  getOrder: {
    path: "/order.OrderService/GetOrder",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OrderRequest): Buffer => Buffer.from(OrderRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): OrderRequest => OrderRequest.decode(value),
    responseSerialize: (value: OrderResponse): Buffer => Buffer.from(OrderResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): OrderResponse => OrderResponse.decode(value),
  },
  listOrders: {
    path: "/order.OrderService/ListOrders",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: OrderListResponse): Buffer => Buffer.from(OrderListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): OrderListResponse => OrderListResponse.decode(value),
  },
} as const;

export interface OrderServiceServer extends UntypedServiceImplementation {
  createOrder: handleUnaryCall<CreateOrderRequest, OrderResponse>;
  getOrder: handleUnaryCall<OrderRequest, OrderResponse>;
  listOrders: handleUnaryCall<Empty, OrderListResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
